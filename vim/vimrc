"" ---------------------------
"" nocompatible; do this first
"" ---------------------------

set nocompatible         " 

"" ------------
"" visual stuff
"" ------------

set background=dark      " use colors that look good on a dark background
set lazyredraw           " don't redraw the screen when we don't have to
set list                 " show certain non-printable characters
set modeline             " look for modelines in opened files
set number               " display line numbers
set ruler                " display position
let &showbreak = '+++ '  " indicate wrapped lines (wrap has to be on)
set showcmd              " 
set showmatch            " show matching brackets/parens
set wildmenu             " display completions above the cmdline
" TODO set wildmode=longest:full,full,list "

colorscheme ron          " 
syntax enable            " 

" highlight certain whitespace characters

let listchars_unicode="eol:¶,extends:>,nbsp:_,precedes:<,tab:»·"
let listchars_ascii="eol:$,extends:>,nbsp:_,precedes:<,tab:>-"

if has("multi_byte") && ($LANG == "en_US.utf-8" || $LANG == "en_US.UTF-8")
    let &listchars=listchars_unicode
else
    let &listchars=listchars_ascii
endif

" highlight > 80 column text; there are two alternatives:

set colorcolumn=+1
" au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%80v.\+', -1)

" highlight line and column

hi CursorLine cterm=NONE ctermbg=darkblue ctermfg=NONE guibg=darkblue guifg=NONE
hi CursorColumn cterm=NONE ctermbg=darkblue ctermfg=NONE guibg=darkblue guifg=NONE

"" ---------
"" searching
"" ---------

set hlsearch             " 
set ignorecase           " 
set incsearch            " 
set smartcase            " 

"" ----------------
"" editing behavior
"" ----------------

set backspace=2          " 
set tabstop=4            " 
set softtabstop=4        " 
set textwidth=78         " 
set joinspaces           " two spaces after punctuation; useful for gqap
set formatoptions+=l     " 
set formatoptions+=c     " 
" set formatoptions-=t     " 

"" --------
"" spelling
"" --------

set dictionary=/usr/share/dict/words
set spelllang=en_us
" set spellfile=~/.dotfiles/spell/words
set spellsuggest=best,8

"" ---------------------------------------
"" filetype indentation/plugins/completion
"" ---------------------------------------

filetype indent on       " load indentation files
filetype plugin on       " load plugin files

" TODO set omnifunc=syntaxcomplete#Complete

"" ----
"" misc
"" ----

set autoread             " 

"" --------------------------------
"" keybindings and mapping behavior
"" --------------------------------

set timeout              " 
set timeoutlen=500       " 
let mapleader=" "        " 
set pastetoggle=<f12>    " 

" emulate spacemacs keychord for escape

inoremap fd <esc>

" move by visual line

nnoremap j gj
nnoremap k gk
nnoremap 0 g0
nnoremap ^ g^
nnoremap $ g$

" remap Y to y$

map Y y$

" yank and copy visual selection to X clipboard

" vnoremap <silent> y y :call system("xclip -sel clipboard -i", @")<cr>

" highlight last inserted text (this overrides the default gV)

nnoremap gV `[v`]

" emulate some emacs behavior since I switch back and forth

" ... map C-x C-s to save in insert and normal modes; these require that
" the terminal have flow control turned off (stty stop '' -ixoff)

inoremap <C-x><C-s> <C-\><C-o>:w<cr>
nnoremap <C-x><C-s> :w<cr>

" ... map C-a / C-e movements

cnoremap <C-a> <home>
cnoremap <C-e> <end>
inoremap <C-a> <home>
inoremap <C-e> <end>
nnoremap <C-a> <home>
nnoremap <C-e> <end>

" ... delete word and line from cursor

inoremap <C-w> <C-o>daW
inoremap <C-k> <C-o>D

" leader mappings

" ... toggle line and col highlight

nnoremap <leader>c :set cursorline! cursorcolumn!<cr>

" ... set listchars to ascii or unicode; toggle set list

nnoremap <leader>tvt :set list!<cr>
nnoremap <leader>tva :let &listchars=listchars_ascii<cr>
nnoremap <leader>tvu :let &listchars=listchars_unicode<cr>

" ... remove all search highlights

map <leader>h :nohlsearch<cr>

" ... copy visual selection to X clipboard

vnoremap <silent> <leader>C :w !xclip -sel clipboard -i<cr>

" ... copy previously yanked/deleted text from register to clipboard

nnoremap <silent> <leader>C :call system("xclip -sel clipboard -i", @")<cr>

" ... paste from X clipboard

noremap <silent> <leader>P :r !xclip -sel clipboard -o<cr>

" ... map <leader><space> to use C mapping (copy)

vmap <silent> <leader><space> <space>C
nmap <silent> <leader><space> V<space>C<esc>

"" -----------------
"" filetype autocmds
"" -----------------

augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    autocmd BufWritePre *.php,*.py,*.js,*.txt,*.hs,*.java,*.md
                \: call <SID>StripTrailingWhitespaces()
    autocmd FileType java setlocal noexpandtab
    autocmd FileType java setlocal list
    autocmd FileType java setlocal listchars=tab:+\ ,eol:-
    autocmd FileType java setlocal formatprg=par\ -w80\ -T4
    autocmd FileType php setlocal expandtab
    autocmd FileType php setlocal list
    autocmd FileType php setlocal listchars=tab:+\ ,eol:-
    autocmd FileType php setlocal formatprg=par\ -w80\ -T4
    autocmd FileType python setlocal commentstring=#\ %s
    autocmd FileType ruby setlocal tabstop=2
    autocmd FileType ruby setlocal shiftwidth=2
    autocmd FileType ruby setlocal softtabstop=2
    autocmd FileType ruby setlocal commentstring=#\ %s
    autocmd BufEnter *.cls setlocal filetype=java
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
    autocmd BufEnter Makefile setlocal noexpandtab
augroup END

"" ---------
"" functions
"" ---------

" Strips trailing whitespace at the end of files.  This is called on buffer
" write in the autogroup above.
"
" Credit: http://dougblack.io/words/a-good-vimrc.html

function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction

